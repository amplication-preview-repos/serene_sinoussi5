/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RaydiumPrice } from "./RaydiumPrice";
import { RaydiumPriceCountArgs } from "./RaydiumPriceCountArgs";
import { RaydiumPriceFindManyArgs } from "./RaydiumPriceFindManyArgs";
import { RaydiumPriceFindUniqueArgs } from "./RaydiumPriceFindUniqueArgs";
import { CreateRaydiumPriceArgs } from "./CreateRaydiumPriceArgs";
import { UpdateRaydiumPriceArgs } from "./UpdateRaydiumPriceArgs";
import { DeleteRaydiumPriceArgs } from "./DeleteRaydiumPriceArgs";
import { RaydiumPriceService } from "../raydiumPrice.service";
@graphql.Resolver(() => RaydiumPrice)
export class RaydiumPriceResolverBase {
  constructor(protected readonly service: RaydiumPriceService) {}

  async _raydiumPricesMeta(
    @graphql.Args() args: RaydiumPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RaydiumPrice])
  async raydiumPrices(
    @graphql.Args() args: RaydiumPriceFindManyArgs
  ): Promise<RaydiumPrice[]> {
    return this.service.raydiumPrices(args);
  }

  @graphql.Query(() => RaydiumPrice, { nullable: true })
  async raydiumPrice(
    @graphql.Args() args: RaydiumPriceFindUniqueArgs
  ): Promise<RaydiumPrice | null> {
    const result = await this.service.raydiumPrice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RaydiumPrice)
  async createRaydiumPrice(
    @graphql.Args() args: CreateRaydiumPriceArgs
  ): Promise<RaydiumPrice> {
    return await this.service.createRaydiumPrice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RaydiumPrice)
  async updateRaydiumPrice(
    @graphql.Args() args: UpdateRaydiumPriceArgs
  ): Promise<RaydiumPrice | null> {
    try {
      return await this.service.updateRaydiumPrice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RaydiumPrice)
  async deleteRaydiumPrice(
    @graphql.Args() args: DeleteRaydiumPriceArgs
  ): Promise<RaydiumPrice | null> {
    try {
      return await this.service.deleteRaydiumPrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
