/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RaydiumPriceService } from "../raydiumPrice.service";
import { RaydiumPriceCreateInput } from "./RaydiumPriceCreateInput";
import { RaydiumPrice } from "./RaydiumPrice";
import { RaydiumPriceFindManyArgs } from "./RaydiumPriceFindManyArgs";
import { RaydiumPriceWhereUniqueInput } from "./RaydiumPriceWhereUniqueInput";
import { RaydiumPriceUpdateInput } from "./RaydiumPriceUpdateInput";

export class RaydiumPriceControllerBase {
  constructor(protected readonly service: RaydiumPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RaydiumPrice })
  async createRaydiumPrice(
    @common.Body() data: RaydiumPriceCreateInput
  ): Promise<RaydiumPrice> {
    return await this.service.createRaydiumPrice({
      data: data,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RaydiumPrice] })
  @ApiNestedQuery(RaydiumPriceFindManyArgs)
  async raydiumPrices(@common.Req() request: Request): Promise<RaydiumPrice[]> {
    const args = plainToClass(RaydiumPriceFindManyArgs, request.query);
    return this.service.raydiumPrices({
      ...args,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RaydiumPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async raydiumPrice(
    @common.Param() params: RaydiumPriceWhereUniqueInput
  ): Promise<RaydiumPrice | null> {
    const result = await this.service.raydiumPrice({
      where: params,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RaydiumPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRaydiumPrice(
    @common.Param() params: RaydiumPriceWhereUniqueInput,
    @common.Body() data: RaydiumPriceUpdateInput
  ): Promise<RaydiumPrice | null> {
    try {
      return await this.service.updateRaydiumPrice({
        where: params,
        data: data,
        select: {
          asset: true,
          createdAt: true,
          id: true,
          price: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RaydiumPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRaydiumPrice(
    @common.Param() params: RaydiumPriceWhereUniqueInput
  ): Promise<RaydiumPrice | null> {
    try {
      return await this.service.deleteRaydiumPrice({
        where: params,
        select: {
          asset: true,
          createdAt: true,
          id: true,
          price: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
