/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JupiterPriceService } from "../jupiterPrice.service";
import { JupiterPriceCreateInput } from "./JupiterPriceCreateInput";
import { JupiterPrice } from "./JupiterPrice";
import { JupiterPriceFindManyArgs } from "./JupiterPriceFindManyArgs";
import { JupiterPriceWhereUniqueInput } from "./JupiterPriceWhereUniqueInput";
import { JupiterPriceUpdateInput } from "./JupiterPriceUpdateInput";

export class JupiterPriceControllerBase {
  constructor(protected readonly service: JupiterPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JupiterPrice })
  async createJupiterPrice(
    @common.Body() data: JupiterPriceCreateInput
  ): Promise<JupiterPrice> {
    return await this.service.createJupiterPrice({
      data: data,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JupiterPrice] })
  @ApiNestedQuery(JupiterPriceFindManyArgs)
  async jupiterPrices(@common.Req() request: Request): Promise<JupiterPrice[]> {
    const args = plainToClass(JupiterPriceFindManyArgs, request.query);
    return this.service.jupiterPrices({
      ...args,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JupiterPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jupiterPrice(
    @common.Param() params: JupiterPriceWhereUniqueInput
  ): Promise<JupiterPrice | null> {
    const result = await this.service.jupiterPrice({
      where: params,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JupiterPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJupiterPrice(
    @common.Param() params: JupiterPriceWhereUniqueInput,
    @common.Body() data: JupiterPriceUpdateInput
  ): Promise<JupiterPrice | null> {
    try {
      return await this.service.updateJupiterPrice({
        where: params,
        data: data,
        select: {
          asset: true,
          createdAt: true,
          id: true,
          price: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JupiterPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJupiterPrice(
    @common.Param() params: JupiterPriceWhereUniqueInput
  ): Promise<JupiterPrice | null> {
    try {
      return await this.service.deleteJupiterPrice({
        where: params,
        select: {
          asset: true,
          createdAt: true,
          id: true,
          price: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
