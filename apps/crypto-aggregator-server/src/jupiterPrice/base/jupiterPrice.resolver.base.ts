/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JupiterPrice } from "./JupiterPrice";
import { JupiterPriceCountArgs } from "./JupiterPriceCountArgs";
import { JupiterPriceFindManyArgs } from "./JupiterPriceFindManyArgs";
import { JupiterPriceFindUniqueArgs } from "./JupiterPriceFindUniqueArgs";
import { CreateJupiterPriceArgs } from "./CreateJupiterPriceArgs";
import { UpdateJupiterPriceArgs } from "./UpdateJupiterPriceArgs";
import { DeleteJupiterPriceArgs } from "./DeleteJupiterPriceArgs";
import { JupiterPriceService } from "../jupiterPrice.service";
@graphql.Resolver(() => JupiterPrice)
export class JupiterPriceResolverBase {
  constructor(protected readonly service: JupiterPriceService) {}

  async _jupiterPricesMeta(
    @graphql.Args() args: JupiterPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JupiterPrice])
  async jupiterPrices(
    @graphql.Args() args: JupiterPriceFindManyArgs
  ): Promise<JupiterPrice[]> {
    return this.service.jupiterPrices(args);
  }

  @graphql.Query(() => JupiterPrice, { nullable: true })
  async jupiterPrice(
    @graphql.Args() args: JupiterPriceFindUniqueArgs
  ): Promise<JupiterPrice | null> {
    const result = await this.service.jupiterPrice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JupiterPrice)
  async createJupiterPrice(
    @graphql.Args() args: CreateJupiterPriceArgs
  ): Promise<JupiterPrice> {
    return await this.service.createJupiterPrice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JupiterPrice)
  async updateJupiterPrice(
    @graphql.Args() args: UpdateJupiterPriceArgs
  ): Promise<JupiterPrice | null> {
    try {
      return await this.service.updateJupiterPrice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JupiterPrice)
  async deleteJupiterPrice(
    @graphql.Args() args: DeleteJupiterPriceArgs
  ): Promise<JupiterPrice | null> {
    try {
      return await this.service.deleteJupiterPrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
