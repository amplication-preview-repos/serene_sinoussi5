/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrcaPriceService } from "../orcaPrice.service";
import { OrcaPriceCreateInput } from "./OrcaPriceCreateInput";
import { OrcaPrice } from "./OrcaPrice";
import { OrcaPriceFindManyArgs } from "./OrcaPriceFindManyArgs";
import { OrcaPriceWhereUniqueInput } from "./OrcaPriceWhereUniqueInput";
import { OrcaPriceUpdateInput } from "./OrcaPriceUpdateInput";

export class OrcaPriceControllerBase {
  constructor(protected readonly service: OrcaPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrcaPrice })
  async createOrcaPrice(
    @common.Body() data: OrcaPriceCreateInput
  ): Promise<OrcaPrice> {
    return await this.service.createOrcaPrice({
      data: data,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrcaPrice] })
  @ApiNestedQuery(OrcaPriceFindManyArgs)
  async orcaPrices(@common.Req() request: Request): Promise<OrcaPrice[]> {
    const args = plainToClass(OrcaPriceFindManyArgs, request.query);
    return this.service.orcaPrices({
      ...args,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrcaPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orcaPrice(
    @common.Param() params: OrcaPriceWhereUniqueInput
  ): Promise<OrcaPrice | null> {
    const result = await this.service.orcaPrice({
      where: params,
      select: {
        asset: true,
        createdAt: true,
        id: true,
        price: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrcaPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrcaPrice(
    @common.Param() params: OrcaPriceWhereUniqueInput,
    @common.Body() data: OrcaPriceUpdateInput
  ): Promise<OrcaPrice | null> {
    try {
      return await this.service.updateOrcaPrice({
        where: params,
        data: data,
        select: {
          asset: true,
          createdAt: true,
          id: true,
          price: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrcaPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrcaPrice(
    @common.Param() params: OrcaPriceWhereUniqueInput
  ): Promise<OrcaPrice | null> {
    try {
      return await this.service.deleteOrcaPrice({
        where: params,
        select: {
          asset: true,
          createdAt: true,
          id: true,
          price: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
