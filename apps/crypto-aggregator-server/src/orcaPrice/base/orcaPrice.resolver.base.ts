/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OrcaPrice } from "./OrcaPrice";
import { OrcaPriceCountArgs } from "./OrcaPriceCountArgs";
import { OrcaPriceFindManyArgs } from "./OrcaPriceFindManyArgs";
import { OrcaPriceFindUniqueArgs } from "./OrcaPriceFindUniqueArgs";
import { CreateOrcaPriceArgs } from "./CreateOrcaPriceArgs";
import { UpdateOrcaPriceArgs } from "./UpdateOrcaPriceArgs";
import { DeleteOrcaPriceArgs } from "./DeleteOrcaPriceArgs";
import { OrcaPriceService } from "../orcaPrice.service";
@graphql.Resolver(() => OrcaPrice)
export class OrcaPriceResolverBase {
  constructor(protected readonly service: OrcaPriceService) {}

  async _orcaPricesMeta(
    @graphql.Args() args: OrcaPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrcaPrice])
  async orcaPrices(
    @graphql.Args() args: OrcaPriceFindManyArgs
  ): Promise<OrcaPrice[]> {
    return this.service.orcaPrices(args);
  }

  @graphql.Query(() => OrcaPrice, { nullable: true })
  async orcaPrice(
    @graphql.Args() args: OrcaPriceFindUniqueArgs
  ): Promise<OrcaPrice | null> {
    const result = await this.service.orcaPrice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrcaPrice)
  async createOrcaPrice(
    @graphql.Args() args: CreateOrcaPriceArgs
  ): Promise<OrcaPrice> {
    return await this.service.createOrcaPrice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OrcaPrice)
  async updateOrcaPrice(
    @graphql.Args() args: UpdateOrcaPriceArgs
  ): Promise<OrcaPrice | null> {
    try {
      return await this.service.updateOrcaPrice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrcaPrice)
  async deleteOrcaPrice(
    @graphql.Args() args: DeleteOrcaPriceArgs
  ): Promise<OrcaPrice | null> {
    try {
      return await this.service.deleteOrcaPrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
